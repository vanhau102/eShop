@using eShop.Areas.Admin.ViewModels.Category
@model IEnumerable<ListItemCategoryVM>

@{
	ViewData["Title"] = "Index";
}

<h1>Category</h1>



<div id="vueData">
	<p>
		<button class="btn btn-success me-1" v-on:click="showCreateModal()">Create Category</button>
		<button class="btn btn-primary my-3" v-on:click="refreshData()">Làm mới dữ liệu</button>
	</p>

	<table class="table mt-2">
		<thead>
			<tr>
				<th>ID</th>
				<th>Tên danh mục</th>
				<th>Ngày tạo </th>
				<th></th>
			</tr>
		</thead>
		<tbody>

			<tr v-for="item in categories">
				<td>{{item.id}}</td>
				<td>{{item.name}}</td>
				<td>{{new Date(item.createdAt).toLocaleString()}}</td>
				<td>
					<a class="btn btn-secondary me-1" v-on:click="getDataForUpdate(item.id)">Update</a>
					<button class="btn btn-danger" v-on:click="deleteCategory(item.id)">Delete</button>
				</td>
			</tr>

		</tbody>
	</table>
	<partial name="_Create" />
</div>




@section Scripts{ 
	<script>

		//Cấu hình notifilecation
		let opts = {
			"asyncBlock": 200,
			"async": 200
		}
		let noti = new AWN(); // awesome-notifacation

		Vue.createApp({
			data() {
				return {
					action: '',
					mCreate: null,
					categories: [],
					cateData: {
						id: 0,
						name: null
					}
				}
			},
			methods: {
				clearData() {
					this.cateData.id = 0;
					this.cateData.name = null;
				},
				showCreateModal() {
					// reset data
					this.clearData();
					this.action = "Thêm mới ";
					this.mCreate.show()
				},

				getDataForUpdate(id) {
					noti.asyncBlock(
						// gọi ajax
						axios.get("/Admin/Category/GetForUpdate/" + id),

						// Xử lý khi thành công
						(response) => {
							var data = response.data;
							this.cateData = { ...data };
							this.mCreate.show();
							this.action = "Cập nhật ";
						},
					);
				},


				addOrUpdate() {
					if (!this.cateData.name) {
						noti.warning("Chưa nhập dữ liệu !");
						return ;
					}
					let url = "/Admin/Category/Create";

					if (this.cateData.id != 0) {
						url = "/Admin/Category/Update/" + this.cateData.id;
					}
					noti.asyncBlock(
						// gọi ajax
						axios.post(url, this.cateData),

						// Xử lý khi thành công
						(response) => {
							var data = response.data;
							if (data.success) {
								noti.success(this.action + " danh mục thành công");
								this.mCreate.hide(); // Ẩn modal
								this.refreshData();
							}
						},
						(err) => {
							console.log(err);
							let statusCode = err.response.status;
							if (statusCode == 400) {
								var errRes = err.response.data;
								for (let prop in errRes) {
									for (let mesg of errRes[prop]) {
										noti.alert(mesg);
										//return;
									}
								}
							}
						}
					);
				},
				deleteCategory(id) {
					console.log(id);
					noti.confirm(
						"Xác nhận xoá dữ liệu này ?",
						() => {
							noti.async(
								axios.get("/Admin/Category/Delete/" + id),
								(response) => {
									var data = response.data;
									if (data.success) {
										noti.success("Xoá danh mục thành công ");
										//load lại dữ liệu trang index
										this.refreshData();
									} else {
										noti.warning(data.mesg);
									}
								}
							);
						}
					);
				},
				refreshData() {
					noti.asyncBlock(
						// gọi ajax
						axios.get("/Admin/Category/GetAll")
							
						,
						// Xử lý khi thành công
						(response) => {
							console.log(response.data);
							this.categories = [...response.data]; //gán dữ liệu vào data
							noti.success("Tải dữ liệu thành công");
						}
						,
						// Xử lý khi thất bại 
						(err) => {
							noti.alert("Tải dữ liệu thất bại ");
						},
						// nội dung chờ

					);
				}
			},
			mounted() {
				this.mCreate = new bootstrap.Modal("#modalCreate");
				this.refreshData();
			}
		}).mount("#vueData");


	</script>
}